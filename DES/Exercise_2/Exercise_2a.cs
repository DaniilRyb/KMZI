/*
–ó–∞–¥–∞–Ω–∏–µ 2–∞ - DES
A) ¬´–°–∫–ª–µ–∏—Ç—å¬ª –ø–µ—Ä–≤—ã–µ ùëñ –±–∏—Ç–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ ùëñ –±–∏—Ç–∞–º–∏ –∏–∑ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
–¥–ª–∏–Ω–æ–π ùëôùëíùëõ –±–∏—Ç–æ–≤. –ü—Ä–∏–º–µ—Ä. –ü—É—Å—Ç—å –µ—Å—Ç—å 12-—Ä–∞–∑—Ä—è–¥–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ,
–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ –≤ –¥–≤–æ–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Å—á–∏—Å–ª–µ–Ω–∏—è 100011101101.
¬´–°–∫–ª–µ–∏–º¬ª –ø–µ—Ä–≤—ã–µ 3 –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –±–∏—Ç–∞, –ø–æ–ª—É—á–∏–º 100101. 
*/

public static class DZ1_Exercise_2a
{
    private static int GlueBits(string binaryNumber, int i)
    {
        var result = 0;
        var len = binaryNumber.Length;
        if (i >= len)
        {
            Console.WriteLine("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ i.");
            return 0;
        }

        var firstBits = Convert.ToInt32(binaryNumber.Substring(0, i), 2); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–µ—Ä–≤—ã–µ i –±–∏—Ç–æ–≤ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        var lastBits = Convert.ToInt32(binaryNumber.Substring(len - i, i), 2); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ i –±–∏—Ç–æ–≤ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        result = (firstBits << i) | lastBits; // "–°–∫–ª–µ–∏–≤–∞–µ–º" –ø–µ—Ä–≤—ã–µ i –±–∏—Ç–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ i –±–∏—Ç–∞–º–∏
        return result;
    }

    public static void Main()
    {
        Console.Write("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –¥–≤–æ–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Å—á–∏—Å–ª–µ–Ω–∏—è: ");
        var binaryNumber = Console.ReadLine();
        Console.Write("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–∫–ª–µ–∏—Ç—å (i): ");
        var i = Convert.ToInt32(Console.ReadLine());
        var resultGlueNumbers = GlueBits(binaryNumber, i);
        var binaryResult = Convert.ToString(resultGlueNumbers, 2); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –¥–≤–æ–∏—á–Ω–æ–µ —á–∏—Å–ª–æ
        Console.WriteLine($"–†–µ–∑—É–ª—å—Ç–∞—Ç: {binaryResult.PadLeft(i * 2, '0')}");
    }
}