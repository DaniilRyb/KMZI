/*
 –ó–∞–¥–∞–Ω–∏–µ 9 - RSA
 * –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ–∑–≤–µ–¥–µ–Ω–∏—è –≤ —Å—Ç–µ–ø–µ–Ω—å –ø–æ –º–æ–¥—É–ª—é ùëö.
 */

public class DZ2_Exercise_9
{
    private static long ModuloPower(long baseNumber, long exponent, long m)
    {
        if (m == 1)
            return 0;
        
        long result = 1;
        baseNumber %= m;
        
        while (exponent > 0)
        {
            if ((exponent & 1) == 1)
                result = (result * baseNumber) % m;
            
            exponent >>= 1;
            baseNumber = (baseNumber * baseNumber) % m;
        }
        
        return result;
    }
    public static void Exercise_9()
    {
        Console.WriteLine("–í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞:");
        long baseNumber = Convert.ToInt64(Console.ReadLine());
        
        Console.WriteLine("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å—Ç–µ–ø–µ–Ω–∏:");
        long exponent = Convert.ToInt64(Console.ReadLine());
        
        Console.WriteLine("–í–≤–µ–¥–∏—Ç–µ –º–æ–¥—É–ª—å:");
        long m = Convert.ToInt64(Console.ReadLine());
        
        long result = ModuloPower(baseNumber, exponent, m);
        Console.WriteLine("–†–µ–∑—É–ª—å—Ç–∞—Ç: " + result);
    }
    
}