/*
 –ó–∞–¥–∞–Ω–∏–µ 5 - RSA
 –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –≤—ã–≤–æ–¥—è—â—É—é –≤—Å–µ –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–µ–Ω—å—à–µ ùëö.
*/

public static class DZ2_Exercise_5
{

    private static bool[] eratosphenAlgorithm(int number, bool[] isPrime)
    {
        for (int i = 2; i * i < number; i++)
        {
            if (isPrime[i])
            {
                for (int j = i * i; j < number; j += i)
                {
                    isPrime[j] = false;
                }
            }
        }

        return isPrime;
    }

    public static void Exercise_5()
    {
        Console.WriteLine("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ ùëö: ");
        string numberString = Console.ReadLine();
        int m = Convert.ToInt32(numberString);
        
        if (m < 2)
        {
            Console.WriteLine("–ü—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª –Ω–µ—Ç");
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Å—Ç–æ—Ç–µ —á–∏—Å–µ–ª
        bool[] isPrime = new bool[m];

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –∫–∞–∫ –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞
        for (int i = 2; i < m; i++) isPrime[i] = true;

        isPrime = eratosphenAlgorithm(m, isPrime);
        
        // –í—ã–≤–æ–¥ –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª
        Console.WriteLine("–ü—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ –º–µ–Ω—å—à–µ {0}:", m);
        for (int i = 2; i < m; i++)
        {
            if (isPrime[i])
            {
                Console.Write("{0} ", i);
            }
        }
    }
}
