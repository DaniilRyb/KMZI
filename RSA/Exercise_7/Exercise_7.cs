/*
 –ó–∞–¥–∞–Ω–∏–µ 7 - RSA
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â—É—é —á–∏—Å–ª–æ ùëö –≤ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–º
—Ä–∞–∑–ª–æ–∂–µ–Ω–∏–∏ –ø–æ —Å—Ç–µ–ø–µ–Ω—è–º –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª. 
*/

public class DZ2_Exercise_7  {

    public static void Exercise_7()
    {
        Console.WriteLine("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:");
        string numberString = Console.ReadLine();
        int m = Convert.ToInt32(numberString);
        
        if (m < 2)
        {
            Console.WriteLine("–ß–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–ª–æ–∂–µ–Ω–æ –ø–æ —Å—Ç–µ–ø–µ–Ω—è–º –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª.");
            return;
        }

        Console.WriteLine("–ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ —á–∏—Å–ª–∞ {0}:", m);
        List<int> primeFactors = GetPrimeFactors(m);

        for (int i = 0; i < primeFactors.Count; i++)
        {
            int primeFactor = primeFactors[i];
            int power = GetPowerOfPrimeFactor(m, primeFactor);

            Console.WriteLine("{0}^{1}", primeFactor, power);

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø—Ä–æ—Å—Ç—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏
            while (i + 1 < primeFactors.Count && primeFactors[i + 1] == primeFactor)
            {
                i++;
            }
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Å—Ç—ã—Ö –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π —á–∏—Å–ª–∞
    public static List<int> GetPrimeFactors(int number)
    {
        List<int> primeFactors = new List<int>();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–ª–∏–º–æ—Å—Ç—å –Ω–∞ 2
        while (number % 2 == 0)
        {
            primeFactors.Add(2);
            number /= 2;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–ª–∏–º–æ—Å—Ç—å –Ω–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ—á–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞
        for (int i = 3; i <= Math.Sqrt(number); i += 2)
        {
            while (number % i == 0)
            {
                primeFactors.Add(i);
                number /= i;
            }
        }

        // –ï—Å–ª–∏ number > 2, –æ—Å—Ç–∞–≤—à–µ–µ—Å—è —á–∏—Å–ª–æ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º
        if (number > 2)
        {
            primeFactors.Add(number);
        }

        return primeFactors;
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–µ–ø–µ–Ω–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è –≤ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–∏ —á–∏—Å–ª–∞
    public static int GetPowerOfPrimeFactor(int number, int primeFactor)
    {
        int power = 0;

        while (number % primeFactor == 0)
        {
            power++;
            number /= primeFactor;
        }

        return power;
    }
    
}
