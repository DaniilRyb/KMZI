/*
–î–∞–Ω–æ ùëõ –±–∏—Ç–æ–≤–æ–µ –¥–∞–Ω–Ω–æ–µ. –ó–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∏—Ç (1,8,23,0,16,...).
–ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –≤—ã–ø–æ–ª–Ω—è—é—â—É—é —ç—Ç—É –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫—É. –ü—Ä–∏–º–µ—Ä —á–∏—Å–ª–∞ 10101110 

*/


/*
 –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã:
 –í–≤–µ–¥–∏—Ç–µ –¥–≤–æ–∏—á–Ω–æ–µ —á–∏—Å–ª–æ: 10101110
 –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫—É –±–∏—Ç (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): 5,3,7,1,4,0,6,2
 –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∏—Ç: 11110001
 */

public static class Exercise_6
{
    private static int PerformBitPermutation(string binaryNumber, string[] positions)
    {
        int result = 0;
        int bitLength = binaryNumber.Length;

        for (int i = 0; i < positions.Length; i++)
        {
            int pos = Convert.ToInt32(positions[i].Trim());

            // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –±–∏—Ç–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏ pos –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —á–∏—Å–ª–∞
            int bitValue = GetBitValue(binaryNumber, bitLength - pos - 1);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –±–∏—Ç–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–º —á–∏—Å–ª–µ
            result |= bitValue << i;
        }

        return result;
    }
    private static int GetBitValue(string binaryNumber, int position)
    {
        if (position < 0 || position >= binaryNumber.Length)
            return 0;

        return binaryNumber[position] - '0';
    }
    private static int ReverseBits(int number)
    {
        int reversedNumber = 0;

        while (number != 0)
        {
            reversedNumber <<= 1;
            reversedNumber |= number & 1;
            number >>= 1;
        }

        return reversedNumber;
    }
    
    public static void DZ1_Exercise_6()
    {
        
        Console.Write("–í–≤–µ–¥–∏—Ç–µ –¥–≤–æ–∏—á–Ω–æ–µ —á–∏—Å–ª–æ: ");
        string binaryNumber = Console.ReadLine();

        Console.WriteLine("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫—É –±–∏—Ç (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):");
        string[] positions = Console.ReadLine().Split(',');

        int result = PerformBitPermutation(binaryNumber, positions);
        int reversedResult = ReverseBits(result);
        Console.WriteLine("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∏—Ç: " + Convert.ToString(reversedResult, 2));

    }
    
    }
